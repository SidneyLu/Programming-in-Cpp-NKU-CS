//格式控制
//更适合看到printf和scanf、格式控制串就头晕的你
//格式控制串留到和正则表达式regex一起讲

#include <iostream> // 标准输入输出流
#include <iomanip>  // 用于格式化输出
#include <format> // C++20引入的格式化库
#include <string>  // 字符串处理

using namespace std;

int main() {
	// 常见转义字符 \n 换行 \t 制表符 \\ 反斜杠 \" 双引号 \' 单引号 \0 空字符
	// 强制类型转换 static_cast<type>(value)
	// 转成string to_string(value)

	// 1. 使用iomanip进行格式化输出
	double pi = 3.141592653589793;
	cout << "=== 使用iomanip进行格式化输出 ===" << endl;
	cout << "默认输出: " << pi << endl; // 默认输出
	cout << "设置小数点后3位: " << fixed << setprecision(3) << pi << endl; // 设置小数点后3位
	//没有fixed，setprecision设置的是有效数字位数（高中物理被它支配的恐惧消散否？）
	cout << "科学计数法: " << scientific << pi << endl; // 科学计数法
	cout.unsetf(ios::scientific); // 取消科学计数法
	cout << "宽度10，右对齐: " << setw(10) << right << pi << endl; // 宽度10，右对齐
	cout << "宽度10，左对齐: " << setw(10) << left << pi << endl; // 宽度10，左对齐
	cout << "填充字符*: " << setfill('*') << setw(10) << right << pi << endl; // 填充字符*


	// 2. 使用C++20的format进行格式化输出
	cout << "\n=== 使用C++20的format进行格式化输出 ===" << endl;
	cout << format("默认输出: {}\n", pi); // 默认输出
	cout << format("设置小数点后3位: {:.3f}\n", pi); // 设置小数点后3位
	cout << format("科学计数法: {:.3e}\n", pi); // 科学计数法
	cout << format("宽度10，右对齐: {:>10}\n", pi); // 宽度10，右对齐
	cout << format("宽度10，左对齐: {:<10}\n", pi); // 宽度10，左对齐
	cout << format("填充字符*: {:*>10}\n", pi); // 填充字符*


	// 3. Raw String Literal（原始字符串字面量）C++11引入
	std::cout << R"(
				********
               ************
               ####....#.
             #..###.....##....
             ###.......######              ###            ###
                ...........               #...#          #...#
               ##*#######                 #.#.#          #.#.#
            ####*******######             #.#.#          #.#.#
           ...#***.****.*###....          #...#          #...#
           ....**********##.....           ###            ###
           ....****    *****....
             ####        ####
           ######        ######
##############################################################
#...#......#.##...#......#.##...#......#.##------------------#
###########################################------------------#
#..#....#....##..#....#....##..#....#....#####################
##########################################    #----------#
#.....#......##.....#......##.....#......#    #----------#
##########################################    #----------#
#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#
##########################################    ############
					)" << endl;
	
	// 4. 读入整行文本（忽略空格）
	cin.getline(nullptr, 0); // 清除输入缓冲区
	// cin.getline(array, length) 读入整行文本到字符数组，遇到换行符结束，length防止溢出
	cout << "请输入一行文本（可包含空格）：";
	string line;
	getline(cin, line); // 读入整行文本,getline()是string类的成员函数
	cout << "你输入的文本是: " << line << endl;

	return 0;
}